#+TITLE: Emacs customizations to maximize John's Emacs


* Basic customizations
#+BEGIN_SRC emacs-lisp
(setq frame-title-format "jmax - awesome editing")

(global-visual-line-mode 1) ;; how long lines are handled.
                            ;; This appears to wrap long lines

(global-font-lock-mode t)   ;; turn on font-lock mode everywhere

(show-paren-mode 1)         ;; highlight parentheses
(setq show-paren-style 'expression) ;; alternative is 'parenthesis

(line-number-mode 1)  ;; turn linumbers on in mode-line
(global-linum-mode t) ;; put line numbers on left side of the screen

(setq backup-inhibited t)  ;; disable backup file creation

(setq inhibit-startup-screen t) ;; stop showing startup screen

(fset 'yes-or-no-p 'y-or-n-p) ; answer with y/n instead of yes/no
#+END_SRC

** packages to always load
#+begin_src emacs-lisp
  (require 'cl)           ;; common-lisp functions

  (require 'saveplace)     ;; When you visit a file, point goes to the
                           ;; last place where it was when you
                           ;; previously visited the same file.

  (require 'ffap)          ;; find-file-at-point

  (require 'uniquify)      ;; overrides Emacs’ default mechanism for
                           ;; making buffer names unique (using suffixes
                           ;; like <2>, <3> etc.) with a more sensible
                           ;; behaviour which use parts of the file
                           ;; names to make the buffer names
                           ;; distinguishable.

  (require 'ansi-color)    ;; translates ANSI SGR (Select Graphic
                           ;; Rendition) escape sequences like “Esc [ 30
                           ;; m” into EmacsOverlays, TextProperties, or
                           ;; XEmacsExtents with face colours, bold,
                           ;; etc.

  (require 'recentf)       ;; Toggles "Open recent" menu
#+end_src

** Setup package manager
#+begin_src emacs-lisp
  (setq package-archives
        '(("gnu"         . "http://elpa.gnu.org/packages/")
          ("original"    . "http://tromey.com/elpa/")
          ("org"         . "http://orgmode.org/elpa/")
          ("marmalade"   . "http://marmalade-repo.org/packages/")))
  (package-initialize)

  (defvar starter-kit-packages
    (list 'yasnippet-bundle)
    "Libraries that should be installed by default.")

  (unless package-archive-contents
    (package-refresh-contents))

  (dolist (package starter-kit-packages)
    (unless (package-installed-p package)
      (package-install package)))
#+end_src
* TODO color theme

* TODO python
Support for the Python programming language.

** Check Dependencies

Determine whether required packages are installed. If not, use ELPA to
install them.
#+begin_src emacs-lisp
  (dolist (package '(python-mode ipython))
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

** Use Python's python-mode.el instead of Emacs' python.el
   :PROPERTIES:
   :CUSTOM_ID: python
   :END:
Replace the Python mode that comes with Emacs by the Python mode
supplied by the Python distribution itself.
#+begin_src emacs-lisp
(require 'python-mode)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))
#+end_src

** Use IPython if =ipython= command is present
   :PROPERTIES:
   :CUSTOM_ID: ipython
   :END:
If an =ipython= executable is on the path, then assume that IPython is
the preferred method python evaluation.
#+begin_src emacs-lisp
  (when (executable-find "ipython")
    (require 'ipython)
    (setq org-babel-python-mode 'python-mode))
#+end_src

* org-mode
#+BEGIN_SRC emacs-lisp
(require 'org-list)
(require 'org-special-blocks)
(require 'org)
;; (require 'org-drill)

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key [f12] 'org-mode)

(global-set-key "\C-e" 'end-of-line); overwrites org-mode \C-e definition

(global-set-key "\C-cL" 'org-insert-link-global)
(global-set-key "\C-co" 'org-open-at-point-global)
#+END_SRC
** basic setup
#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)

; do not evaluate code on export
(setq org-export-babel-evaluate nil)

; register python in org-mode
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

; enable prompt-free code running
(setq org-confirm-babel-evaluate nil)

; no extra indentation
(setq org-src-preserve-indentation t)
(setq org-startup-with-inline-images "inlineimages")

; use syntax highlighting in org-file
(setq org-src-fontify-natively t)
#+END_SRC
** default output for code blocks
#+BEGIN_SRC emacs-lisp
; set default :results to output
(setq org-babel-default-header-args
      (cons '(:results . "replace output")
	    (assq-delete-all :results org-babel-default-header-args)))

(setq org-babel-default-header-args
      (cons '(:exports . "both")
	    (assq-delete-all :exports org-babel-default-header-args)))
#+END_SRC
** customized faces
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(flyspell-duplicate ((t (:foreground "red" :underline t :weight bold))))
 '(org-link ((t (:inherit link :foreground "medium blue" :underline t)))))
#+END_SRC

** reftex setup
#+BEGIN_SRC emacs-lisp
(defun org-mode-reftex-setup ()
  (load-library "reftex")
  (and (buffer-file-name)
       (file-exists-p (buffer-file-name))
       (reftex-parse-all))
  (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
  )
(add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_SRC
** publishing setup
#+BEGIN_SRC emacs-lisp
(setq org-export-latex-default-packages-alist
      (quote
       (("AUTO" "inputenc" t)
	("" "fixltx2e" nil)
    ("" "url")
	("" "graphicx" t)
    ("" "minted" t)
    ("" "color" t)
	("" "longtable" nil)
	("" "float" nil)
	("" "wrapfig" nil)
	("" "soul" t)
	("" "textcomp" t)
    ("" "amsmath" t)
	("" "marvosym" t)
	("" "wasysym" t)
	("" "latexsym" t)
	("" "amssymb" t)
	("linktocpage,
  pdfstartview=FitH,
  colorlinks,
  linkcolor=blue,
  anchorcolor=blue,
  citecolor=blue,
  filecolor=blue,
  menucolor=blue,
  urlcolor=blue" "hyperref" t)
	("" "attachfile" t)
	"\\tolerance=1000")))

(setq org-export-latex-listings 'minted)
(setq org-export-latex-minted-options
           '(("frame" "lines")
             ("fontsize" "\\scriptsize")
             ("linenos" "")))
(setq org-latex-to-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "bibtex %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
** org-mode links
*** pydoc
#+BEGIN_SRC emacs-lisp
; here is a way to get pydoc in a link: [[pydoc:numpy]]
(setq org-link-abbrev-alist
      '(("pydoc" . "shell:pydoc %s")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; these allow me to write mod:numpy or func:numpy.dot to get
;; clickable links to documentation
(org-add-link-type
 "mod"
 (lambda (arg)
   (shell-command (format "pydoc %s" arg) nil))
 (lambda (path desc format)
   (cond
    ((eq format 'latex)
     (format "\\texttt{%s}" path)))))

(org-add-link-type
 "func"
 (lambda (arg)
   (shell-command (format "pydoc %s" arg) nil))
 (lambda (path desc format)
   (cond
    ((eq format 'latex)
     (format "\\texttt{%s}" path)))))
#+END_SRC

*** links to microsoft files
#+BEGIN_SRC emacs-lisp
;;; support for links to microsoft docx,pptx,xlsx files
;;; standard org-mode opens these as zip-files
;;  http://orgmode.org/manual/Adding-hyperlink-types.html
(org-add-link-type "msx" 'org-msx-open)

(defun org-msx-open (path)
       "Visit the msx file on PATH.

uses the dos command:
start  empty title path
"
       (shell-command
	(concat "start \"title\" " (shell-quote-argument path)) t))
#+END_SRC


*** asynchronous shell commands
#+BEGIN_SRC emacs-lisp
(org-add-link-type "ashell" 'org-ashell-open)
(defun org-ashell-open (cmd)
"open an ashell:cmd link
[[ashell:xterm -e \"cd 0; ls && /bin/bash\"]]

I use this to run commands asynchronously in the shell. org-mode runs shell links in a blocking mode, which is annoying when you open an xterm."
(start-process-shell-command "ashell" "*scratch*" cmd))
#+END_SRC

*** colored text
#+BEGIN_SRC emacs-lisp
;; -*- emacs-lisp -*-   [[color:red][in red]]
(org-add-link-type
 "color"
 (lambda (path)
   (message (concat "color "
		    (progn (add-text-properties
			    0 (length path)
			    (list 'face `((t (:foreground ,path))))
			    path) path))))
 (lambda (path desc format)
   (cond
    ((eq format 'html)
     (format "<span style=\"color:%s;\">%s</span>" path desc))
    ((eq format 'latex)
     (format "{\\color{%s}%s}" path desc)))))
#+END_SRC

*** VASP incar keyword link
#+BEGIN_SRC emacs-lisp
;; -*- emacs-lisp -*-   [[incar:keyword]]
;; this makes nice links in org-mode to the online documentation and
;; renders useful links in output
;;
;; (org-add-link-type TYPE &optional FOLLOW EXPORT)
;; FOLLOW is the function that takes the path and does what is
;; necessary to "follow" the link.
;; EXPORT takes three args
;;  path the path of the link, the text after the prefix (like "http:")
;;
;;  desc the description of the link, if any, or a
;;  description added by org-export-normalize-links if there is none
;;
;;  format the export format, a symbol like `html' or `latex' or
;;  `ascii'..
(org-add-link-type "incar"
;; FOLLOW code
  (lambda (keyword)
    (shell-command (format "firefox http://cms.mpi.univie.ac.at/wiki/index.php/%s" keyword) nil))
;; FORMAT code
  (lambda (keyword description format)
   (cond
    ((eq format 'html)
     (format "<a href=http://cms.mpi.univie.ac.at/wiki/index.php/%s>%s</a>" keyword keyword))
    ((eq format 'latex)
     (format "\\href{http://cms.mpi.univie.ac.at/wiki/index.php/%s}{%s}"  keyword keyword)
))))
#+END_SRC

*** experimental image link :noexport:
This was to have a way to put a single file name into an org-file, but get the right figure type for different outputs, e.g. png for html, and pdf for pdflatex
#+BEGIN_SRC emacs-lisp
(org-add-link-type
 "image"
 (lambda (keyword)
   ()) ; do nothing. maybe figure out how to open a png or pdf
 (lambda (keyword link format)
   (cond
    ((eq format 'latex)
     (format "\\includegraphics{%s.pdf}" keyword)))))
#+END_SRC

*** citeulike link
This adds a way to link to articles in citeulike. The syntax is citeu:11819912 or [[citeu:11819912, 11819910]]. The link exports as urls in brackets in html and as superscripted urls in latex. In org-mode if you click on the key, it will launch a browser opening to that article.

Known limitations: if they key is not recognized as a word by emacs, the clicking will not work as expected. eg. if your key is something like j:345, this is not recognized as a word by emacs.

#+BEGIN_SRC emacs-lisp
(require 'thingatpt)

(defvar citeu-user "jkitchin"
  "The username for your citeulike account")

(defvar citeu-url (format
                   "http://www.citeulike.org/user/%s/article/"
                   citeu-user)
  "the url that points to an article in citeulike. you add a key to the end to get a specific article.")

(defun citeu-strip-key (key)
  "strip leading and trailing whitespace from the key"
  (interactive)
  (replace-regexp-in-string
   (concat search-whitespace-regexp "$" ) ""
   (replace-regexp-in-string
    (concat "^" search-whitespace-regexp ) "" key) ))

(defun citeu-split-keys (key-string)
  "split key-string and strip keys. Assumes the key-string is comma delimited"
  (mapcar 'citeu-strip-key (split-string key-string ",")))

(defun citeu-visit-key-at-point (arg)
  "find key at point and open a browser to the corresponding citeulike page"
  (let ((key (word-at-point)))
  (browse-url (concat citeu-url key))))

(defun citeu-make-html-link (stripped-key)
  "construct one href link from a stripped-key."
  (let ((href (concat citeu-url stripped-key)))
    (concat "<a href=\"" href "\">" stripped-key "</a>")))

(defun citeu-make-html-links (stripped-keys)
  "combine all links in brackets and output the html code"
  (interactive)
  (concat "[" (mapconcat 'citeu-make-html-link stripped-keys ", ") "]"))

(defun citeu-make-latex-link (stripped-key)
  "make a latex link from a stripped key"
  (let ((href (concat citeu-url stripped-key)))
     (concat "{\\href{" href"}{" stripped-key "}")))

(defun citeu-make-latex-links (stripped-keys)
  "construct links as superscripted bracketed links in latex"
  (interactive)
  (concat "$^{[" (mapconcat 'citeu-make-latex-link stripped-keys ", ") "]$"))

(org-add-link-type "citeu"
  ; visit the key the cursor is on when clicked or Entered
  'citeu-visit-key-at-point
  ; formatting
  (lambda (keyword desc format)
    (cond
     ((eq format 'html)
      (citeu-make-html-links (citeu-split-keys keyword)))
     ((eq format 'latex)
      (citeu-make-latex-links (citeu-split-keys keyword)))
      )))
#+END_SRC
* jmax lisp
** line-spacing
#+BEGIN_SRC emacs-lisp
;; http://sdpconfig.wordpress.com/2011/12/21/unwrapping-paragraphs-in-emacs/
(defun unfill-paragraph ()
  "Unfill paragraph at or after point."
  (interactive "*")
  (let ((fill-column most-positive-fixnum))
    (fill-paragraph nil (region-active-p))))

(defun double-space ()
  "make buffer look approximately double-spaced"
  (interactive)
  (setq line-spacing 10))

(defun single-space ()
  "make buffer single-spaced"
  (interactive)
  (setq line-spacing nil))
#+END_SRC

** get paths and insert functions
#+BEGIN_SRC emacs-lisp
;http://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Expansion.html#File-Name-Expansion

(defun get-path()
  "opens dired so you can navigate to a file to insert a path to it in the current buffer"
  (interactive)
  ; store current buffer so we can change back to it
  (setq current_buffer (current-buffer))
  (setq buffer_name (buffer-file-name))
  ; now call dired to navigate to the path you want
  (dired ())
)

(defun insert-relative-path()
  "inserts the relative path between the original buffer and current file selected in dired"
  (interactive)
  (setq selected_file (dired-get-filename))
  (switch-to-buffer current_buffer) ; back to the original buffer
  (insert  (file-relative-name selected_file));inserts relative path
)

(defun insert-absolute-path()
  "Inserts the absolute path to the file selected in dired"
  (interactive)
  (setq selected_file (dired-get-filename)) ; this is the file the cursor is on
  (switch-to-buffer current_buffer) ; back to the original buffer
  (insert  (expand-file-name selected_file));inserts absolute path
)

(defun insert-buffer-filename()
  "Inserts filename associated with current buffer"
  (interactive)
  (insert (buffer-file-name))
)

(global-set-key "\C-cg" 'get-path )
(global-set-key "\C-cp" 'insert-relative-path)
(global-set-key "\C-cf" 'insert-buffer-filename)
#+END_SRC

** help search functions
#+BEGIN_SRC emacs-lisp
;; http://davidavraamides.net/blog/2008/07/22/mode-aware-google-help-in-emacs/
(defun search-site-url (keyword &optional site inurl lucky)
  "Do a Google search for KEYWORD. Restrict to SITE and INURL, if specified.
Jump to best match (I Feel Lucky) if LUCKY set.
"
  (concat "http://www.google.com/"
          (format "search?q=%s" (url-hexify-string keyword))
          (if site (format "+site:%s" (url-hexify-string site)))
          (if inurl (format "+inurl:%s" (url-hexify-string inurl)))
          (if lucky "&btnI")))

(defun context-help ()
  "Open a browser window showing documentation for the word under the point.
Uses `major-mode' to optionally refine the search to a specific web site,
or a specific pattern in the URL. Defaults to a simple keyword search.
Uses `search-site-url' to do the actual search.
"
  (interactive)
  (require 'url)
  (browse-url
   (apply 'search-site-url
          (thing-at-point 'symbol)
          (cond
            ((equal major-mode 'css-mode)
             '("www.w3schools.com" "/css/" t))
            ((equal major-mode 'emacs-lisp-mode)
             '("www.gnu.org" "/emacs/"))
            ((or (equal major-mode 'html-mode)
                 (equal major-mode 'html-helper-mode))
             '("www.htmlquick.com" "/reference/" t))
            ((equal major-mode 'javascript-mode)
             '("www.w3schools.com" nil t))
            ((equal major-mode 'python-mode)
             '("docs.python.org" "/ref/" t))
	    ((equal major-mode 'vasp-mode)
	     '("http://cms.mpi.univie.ac.at" "/vasp/vasp/" t))
            (t nil)))))
#+END_SRC

** system interactions
#+BEGIN_SRC emacs-lisp
;; I think these would eventually get moved to a major mode
(defun run-cat ()
  "example function to run a shell command on  a a filename"
  (interactive)
  (shell-command (concat "cat" " " (buffer-file-name))))

(defun ncsum ()
  "runs ncsum on the current file in dired"
  "the filename should be a netcdf file, although no checks are performed."
  (interactive)
  (dired-do-shell-command "ncsum" nil (list (dired-get-filename))))

(defun ag ()
  "runs ag on the current file in dired"
  "the filename should be a file ag can read, although no checks are performed."
  (interactive)
  (dired-do-shell-command "ag" nil (list (dired-get-filename))))
#+END_SRC
